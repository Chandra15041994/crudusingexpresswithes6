#!/usr/bin/env node

/**
 * Module dependencies.
 */
import http from 'http';
import app from '../app';
import debugto from 'debug';

 const debug = debugto('server:server');


 let normalizePort=(val)=> {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}


let port = normalizePort('3008' || process.env.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

server.listen(port);

/**
 * Event listener for HTTP server "error" event.
 */
 let onError=(error)=> {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on('error', onError);
/**
 * Event listener for HTTP server "listening" event.
 */

 let onListening=()=> {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind);
}


server.on('listening', onListening);